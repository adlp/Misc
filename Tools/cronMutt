#!/usr/bin/env python3

# Le programme ne doit rien faire si son stdin est vide (-S alors il petera quand emem son mail)
# Le programme doit gerener le in reply to si necessaire (-i blah)
# Le programme doit generer le sujet si necessaire (-s subject)
# Le programme doit envoyer a l'user executant  (-d email) LOGNAME
# on peut programmer le a qui con repond et le message id  ( -r / -m )
# ca peut etre lui le lanceur il n'est pas que piped Et ainsi on peut recuperer le stderr (-e '')

### Pour les version python anterieur a 3.6
### pip install future-fstrings
### -*- coding: future_fstrings -*-

import getopt,sys
import os
import hashlib
import subprocess
import threading
from datetime import datetime
import requests
from requests.auth import HTTPBasicAuth

Version="0.18.2"
### Todo intercepter le keyboard interrupt
### Todo ajouter l'usage d'un fichier de donc mode@fichier => muodule mode du fichier fichier
# 0.18.2 correction d'une coquille pour les stderr par mail
# 0.18.1 deplacement de l'initialisation de var afin d'eviter les bug
# 0.18 correctif si on n'a pas d'environnement
# 0.17.4 Rajout de points de debug
# 0.17.3 si -o no alors on n'envoie pas de mail lorsque tout va bien (meme s'il y a du monde)
# 0.17.2 debug sur les emissions empty ou pas, etc
# 0.17.1 L'option -o force maintenant le mail malgres le nextcloud
# 0.17 On rajoute un flag -o qui envoie systematiquement le mail lorsque c'est ok (a ceux preciser dans le -o
# 0.16 Si tout va bien on pousse sur le nc. Si le -E on envoie le gentil mail quand meme. Si tout vat mal, nc+mail
# 0.15.1 Saut de ligne manquant, corrige
# 0.15 L'affichage stdout se fait en direct, on n'attends plus que le process soit execute
# 0.14 On renvoie le meme errorcode que le programme execute en fin sys.ext
# 0.13 On rajoute le hostname dans les entees
# 0.12 On tete de faire de l'autodetection pour le teemode
# 0.11 On gere les pb de caracteres space de microsoft
# 0.10 Pipe mode fonctionnelle : on flush
# 0.9 New header : date debut execution/ commande lancee / exit code
# 0.8.1 On rajoute un header propre a cet outils sans la faute
# 0.7 On rajoute une notion de priorite
# 0.6 On jolieffie le from
# 0.5 en mode tee, on ne saute pas de lignes
# 0.4 Activation du X (no sub chg), Ajout du changement du from, Ajout du tee mode (dump en meme temps que mail le stdout et stderr)
# 0.3 Rajout du traitement des erreures
# 0.2 On rajoute le versionning a cronMutt
# 0.1  Un outils pour mieux gerer l'envoie des mails a partir des corns

def nextcloudput(urldav,lopa,datas):
    # Prepare auth
    lopata=lopa.split(':',2)
    auth = HTTPBasicAuth(lopata[0],lopata[1])
    # Envoyer le fichier au partage Nextcloud
    response = requests.put(urldav, data=datas, auth=auth)

    # Vérifier le succès de l'opération
    if response.status_code in [200, 201, 204]:
        ret=0
    else:
        ret=response.status_code
        #print(f"Erreur lors de l'envoi du fichier : {response.status_code}")
        #print(response.text)
    return(ret)

def subprosend(cmd,datas):
    mutt=subprocess.Popen(cmd,encoding ='utf-8',
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    stdoutdata,stderrdata=mutt.communicate(input=datas)


def version():
    print(f"Version {Version}")
    sys.exit(0)

def usage():
    print("     E       Mail even empty data")
    print("     i:      in-reply-to")
    print("     s:      Mail subject")
    print("     d:      Destination email")
    print("     o:      Destinataire ok mail (sinon c'est uniquement pour les d)")
    print("     r:      ReplyTo")
    print("     f:      from (si different du reply to)")
    print("     m:      message id")
    print("     e:      excute command")
    print("     c       cache la commande du header")
    print("     t:      type du mail")
    print("     X       fonctionelle avec le mode -e xxxx, ne change pas le sujet sur exit code")
    print("     p:      code Page encoding (default: utf8 / ISO-8859–16)")
    print("     T       mode tee affiche a l'ecran")
    print("     n:      url path avec nom de fichier webdav du nextcloud")
    print("     N:      login:password du nextcloud")
    print("     D       debug")
    print("     h       Helpeur")
    print("     V       Version")
    sys.exit(123)

def read_stream(stream, output_list, stream_name):
    global teeMode
    for line in stream:
        output_list[stream_name].append(line.strip())
        if teeMode:
            if stream_name == 'stderr':
                print("[STDERR]:",end='',flush=True)
            print(line,end="",flush=True)
    stream.close()

try:
    opts, args = getopt.getopt(sys.argv[1:], "hVDEi:s:d:o:r:f:m:e:ct:XTp:n:N:", ["help"])
except getopt.GetoptError as err:
    print(err)  # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

debug=False
emptySend=False
subject=f"//cron//{os.path.basename(__file__)}"
inReplyTo=None
dest=os.getenv('LOGNAME','nobody')
destok=None
messageId=os.path.basename(__file__)
cmd=None
mailType=None
replyTo=os.getenv("LOGNAME",'nobody')
exitReact=True
if sys.stdin.isatty():
    teeMode=True
else:
    teeMode=False
mailFrom=None
#-e "set content_type=text/html" 
cmdCache=False
encoding="utf-8"
nextcloud=None
nextauth=None

for opt,arg in opts:
    if   opt in '-h':
        usage()
    elif opt in '-V':
        version()
    elif opt in '-D':
        debug=True
    elif opt in '-E':
        emptySend=True
    elif opt in '-i':
        inReplyTo=arg
    elif opt in '-s':
        subject=arg
    elif opt in "-d":
        dest=arg
    elif opt in '-o':
        destok=arg
    elif opt in '-f':
        mailFrom=arg
    elif opt in "-r":
        replyTo=arg
    elif opt in "-m":
        messageId=arg
    elif opt in "-e":
        cmd=arg
    elif opt in '-t':
        mailType=arg
    elif opt in '-X':
        exitReact=False
    elif opt in '-T':
        teeMode=True
    elif opt in '-c':
        cmdCache=True
    elif opt in '-p':
        encoding=arg
    elif opt in '-n':
        nextcloud=arg
    elif opt in "-N":
        nextauth=arg
    

if inReplyTo is None:
    inReplyTo=hashlib.md5(subject.encode('utf-8')).hexdigest()
if mailFrom is None:
    mailFrom=replyTo
if "<" not in mailFrom:
    tmp=mailFrom
    mailFrom=f'{tmp.split("@")[0]} <{tmp}>'
    if debug:
        print(f"{tmp} ET {mailFrom}")
        print(f'{tmp.split("@")}')

# Preparation Ouverture du mail 1/2
muttcmd=['mutt','-e',f'my_hdr X-cronMutt: cronMutt-{Version}','-e',f'my_hdr X-cronMuttStart: {str(datetime.now())}','-e',f'my_hdr X-cronMuttHost: {os.uname()[1]}','-e',f'my_hdr From:{mailFrom}','-e',f'my_hdr In-Reply-To: {inReplyTo}','-e',f'my_hdr Message-ID: {messageId}']


# Ouverture du process a suivre
errs=[]
exitCode=0
retstd={}
retstd['stdout']=[]
retstd['stderr']=[]

if cmd is not None:
    if not cmdCache:
        muttcmd.append('-e')
        muttcmd.append(f'my_hdr X-cronMuttCmd: {cmd}')

    ps=subprocess.Popen(['/bin/sh','-c',cmd],encoding =encoding,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)

    # Creation puis demarrage des threads de lecture du stdout et stderr
    tstdout = threading.Thread(target=read_stream, args=(ps.stdout, retstd, "stdout"))
    tstderr = threading.Thread(target=read_stream, args=(ps.stderr, retstd, "stderr"))
    tstdout.start()
    tstderr.start()

    #Attente de la fin d'exec des thread et process (les thread affichent en tps reel)
    tstdout.join()
    tstderr.join()
    ps.wait()

    ###inf, errs = ps.communicate()
    exitCode=ps.returncode

    muttcmd.append('-e')
    muttcmd.append(f'my_hdr X-cronMuttExitCode: {str(ps.returncode)}')

    if exitReact and exitCode != 0:
        tmp=subject
        subject="*** "+tmp
        if debug:
            print(f"exit={ps.returncode}")
else:
    inf = sys.stdin

# Preparation Ouverture du mail 2/2
muttcmd.append('-s')
muttcmd.append(subject)

if mailType is not None:
    muttcmd.append('-e')
    muttcmd.append(f'set content_type=text/{mailType}')
if exitCode != 0:
    muttcmd.append('-e')
    muttcmd.append(f'my_hdr X-Priority:1')
muttcmd.append('--')

# Traitement des donnees
datas=""
#for line in inf:
for line in retstd['stdout']:
    #if teeMode:
    #    print(line,end="",flush=True)
    datas+=line+"\n"
if cmd is not None:
    #if len(errs):
    if len(retstd['stderr']):
        datas+="\n=============================================================================\n"
        #for line in errs:
        for line in retstd['stderr']:
            #if teeMode:
            #    print(line,end="",flush=True)
            datas+=line+"\n"

if destok is not None and exitCode == 0:
    muttcmd.append(destok)
else:
    if destok is not None and destok != "no":
        dest+=","+destok
    muttcmd.append(dest)

if debug:
    print(f"{' '.join(muttcmd)}")

ncsended=0

# Emission du mail de la donnee
if nextcloud is not None and nextauth is not None:
    if debug:
        print(f'Depose sur nc ${nextcloud}')
    ncsended=nextcloudput(nextcloud,nextauth,datas)

# Je veux envoyer le mail si
#   * Le nextcloud n'a pas marché
#   * il y a un destok
#   * il y a un empty
#   * il y a de la data
#   * il y a une errere

sendit=False
if ncsended != 0:
    sendit=True
    if debug:
        print('Not Sended')
elif exitCode != 0:
    sendit=True
    if debug:
        print(f'ExitCode-{exitCode}')
elif destok is not None and destok == "no" and exitCode == 0:
    sendit=False
    if debug:
        print('destok no')
elif emptySend or len(datas):
    sendit=True
    if debug:
        print('Send empty if empty en full if len')
else:
    if debug:
        print('Fall back')
    sendit=False

if sendit:
    subprosend(muttcmd,datas)
    if debug:
        print(f"Sended-{len(datas)}")

if debug:
    print(len(datas))

sys.exit(exitCode)