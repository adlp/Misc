Contenu du fichier Tools/fichier.txt dans le dépôt git@github.com:adlp/Poc.git à la version b1a28f1 :

#!/usr/bin/python3

import subprocess
import os
import git
import tempfile
import sys
import difflib
import argparse

# Fonction pour récupérer le contenu depuis stdin
def get_content_from_stdin():
    return sys.stdin.read().strip()

# Fonction pour cloner le dépôt Git temporairement et récupérer le texte du fichier
def get_file_from_git(repo_url, file_path):
    with tempfile.TemporaryDirectory() as tempdir:
        repo = git.Repo.clone_from(repo_url, tempdir)
        target_file = os.path.join(tempdir, file_path)
        
        if os.path.exists(target_file):
            with open(target_file, 'r') as f:
                return f.read().strip(), False  # False indique que le fichier existe déjà
        else:
            return None, True  # True indique que le fichier n'existe pas encore

# Fonction pour afficher le diff entre deux fichiers
def display_diff(original_content, new_content):
    original_lines = original_content.splitlines()
    new_lines = new_content.splitlines()

    diff = difflib.unified_diff(original_lines, new_lines, lineterm='', fromfile='Original', tofile='Nouveau')

    # Affichage ligne par ligne
    print("\nVoici les différences entre les fichiers :")
    for line in diff:
        print(line)

# Fonction pour pousser le fichier modifié sur Git
def push_to_git(repo_url, file_path, new_content, commit_message):
    with tempfile.TemporaryDirectory() as tempdir:
        repo = git.Repo.clone_from(repo_url, tempdir)
        target_file = os.path.join(tempdir, file_path)
        
        # Créer les répertoires si nécessaires
        os.makedirs(os.path.dirname(target_file), exist_ok=True)
        
        # Écrire le nouveau contenu dans le fichier
        with open(target_file, 'w') as f:
            f.write(new_content)
        
        repo.git.add(file_path)
        repo.index.commit(commit_message)
        origin = repo.remote(name='origin')
        origin.push()

# Fonction pour afficher les logs de changements d'un fichier
def show_file_log(repo_url, file_path):
    with tempfile.TemporaryDirectory() as tempdir:
        repo = git.Repo.clone_from(repo_url, tempdir)
        logs = repo.git.log("--", file_path)
        print(f"\nHistorique des changements pour {file_path} :\n")
        print(logs)

# Fonction principale
def main():
    # Utilisation d'argparse pour gérer les options
    parser = argparse.ArgumentParser(description="Script de gestion de fichiers et de dépôt Git.")
    parser.add_argument("-r", "--repo", required=True, help="URL du dépôt Git")
    parser.add_argument("-f", "--file", required=True, help="Chemin du fichier dans le dépôt Git")
    parser.add_argument("-m", "--message", help="Message de commit pour pousser automatiquement")
    parser.add_argument("-g", "--get", action="store_true", help="Afficher le contenu du fichier dans Git sans mise à jour")
    parser.add_argument("-d", "--diff", action="store_true", help="Afficher la différence entre le fichier dans Git et le stdin")
    parser.add_argument("-l", "--log", action="store_true", help="Afficher les logs de changement du fichier")

    args = parser.parse_args()

    # Si le flag -l est activé, on affiche les logs de changements du fichier
    if args.log:
        show_file_log(args.repo, args.file)
        return

    # Si le flag -g est activé, on affiche juste le fichier de Git
    if args.get:
        git_content, _ = get_file_from_git(args.repo, args.file)
        if git_content is not None:
            print(f"Contenu du fichier {args.file} dans le dépôt {args.repo} :\n")
            print(git_content)
        else:
            print(f"Le fichier {args.file} n'existe pas dans le dépôt {args.repo}.")
        return

    # Si stdin est utilisé pour le fichier d'entrée
    result = get_content_from_stdin()

    if not result:
        print("Aucun contenu n'a été fourni via stdin.")
        return

    # Récupérer le fichier depuis le dépôt Git
    git_content, is_new_file = get_file_from_git(args.repo, args.file)

    if is_new_file:
        print(f"Le fichier {args.file} n'existe pas dans le dépôt.")
        if args.message:
            # Pousser le nouveau fichier sur Git avec le message
            push_to_git(args.repo, args.file, result, args.message)
            print(f"Nouveau fichier ajouté et poussé sur Git avec le message : {args.message}")
        else:
            print("Aucun message fourni, annulation de la création du fichier.")
    else:
        # Comparer les deux textes si le fichier existe
        if result != git_content:
            print("Les fichiers ne correspondent pas.")
            if args.diff:
                # Afficher le diff si l'option -d est utilisée
                display_diff(git_content, result)
            elif args.message:
                # Pousser les modifications si un message est fourni
                push_to_git(args.repo, args.file, result, args.message)
                print(f"Fichier mis à jour et poussé sur Git avec le message : {args.message}")
            sys.exit(2)  # Exit code 2 si différence
        else:
            print("Les fichiers sont identiques.")
            sys.exit(0)  # Exit code 0 si identiques

if __name__ == "__main__":
    main()