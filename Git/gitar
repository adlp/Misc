#!/usr/bin/python3

#/*
#* gitar push a tar into a git repo
#* Copyright (C) 2024 Antoine DELAPORTE
#*
#* This program is free software: you can redistribute it and/or modify
#* it under the terms of the GNU General Public License as published by
#* the Free Software Foundation, either version 3 of the License, or
#* (at your option) any later version.
#*
#* This program is distributed in the hope that it will be useful,
#* but WITHOUT ANY WARRANTY; without even the implied warranty of
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#* GNU General Public License for more details.
#*
#* You should have received a copy of the GNU General Public License
#* along with this program.  If not, see <http://www.gnu.org/licenses/>.
#*/

import os
import tarfile
import git
import tempfile
import argparse
import shutil
from filecmp import dircmp

# Fonction pour extraire le fichier .tar.gz dans un répertoire temporaire
def extract_tar(tar_path, extract_to):
    with tarfile.open(tar_path, 'r:gz') as tar:
        tar.extractall(path=extract_to)

# Fonction pour comparer deux répertoires et identifier les différences
def compare_directories(dir1, dir2):
    comparison = dircmp(dir1, dir2)
    added = comparison.left_only  # Fichiers présents seulement dans l'archive tar
    deleted = comparison.right_only  # Fichiers présents seulement dans le Git
    modified = comparison.diff_files  # Fichiers modifiés
    return added, deleted, modified

# Fonction pour synchroniser le contenu du tar avec le dépôt Git
def sync_with_git(repo, repo_dir, temp_dir, message):
    added, deleted, modified = compare_directories(temp_dir, repo_dir)

    # Ajouter les fichiers nouveaux ou modifiés
    for file in added + modified:
        full_path = os.path.join(temp_dir, file)
        target_path = os.path.join(repo_dir, file)
        if os.path.isfile(full_path):
            shutil.copy2(full_path, target_path)
        elif os.path.isdir(full_path):
            shutil.copytree(full_path, target_path)
        repo.git.add(target_path)

    # Supprimer les fichiers qui ne sont plus dans l'archive
    for file in deleted:
        target_path = os.path.join(repo_dir, file)
        if os.path.exists(target_path):
            if os.path.isfile(target_path):
                os.remove(target_path)
            elif os.path.isdir(target_path):
                shutil.rmtree(target_path)
            repo.git.rm(target_path)

    # Si des fichiers ont été ajoutés, modifiés ou supprimés, faire un commit
    if added or deleted or modified:
        repo.index.commit(message)
        origin = repo.remote(name='origin')
        origin.push()
        print(f"Modifications commitées avec succès : {message}")
    else:
        print("Aucune modification à commiter.")

# Fonction principale
def main():
    parser = argparse.ArgumentParser(description="Synchroniser des fichiers d'un tar.gz avec un dépôt Git.")
    parser.add_argument("-t", "--tarfile", required=True, help="Chemin vers le fichier .tar.gz à extraire")
    parser.add_argument("-r", "--repo", required=True, help="URL du dépôt Git")
    parser.add_argument("-p", "--path", required=True, help="Chemin dans le dépôt Git où synchroniser les fichiers")
    parser.add_argument("-m", "--message", required=True, help="Message de commit")

    args = parser.parse_args()

    # Créer un répertoire temporaire pour extraire le fichier tar.gz
    with tempfile.TemporaryDirectory() as temp_dir:
        extract_tar(args.tarfile, temp_dir)

        # Cloner le dépôt Git dans un autre répertoire temporaire
        with tempfile.TemporaryDirectory() as git_dir:
            repo = git.Repo.clone_from(args.repo, git_dir)

            # Chemin vers l'arborescence cible dans le dépôt Git
            target_path = os.path.join(git_dir, args.path.strip('/'))

            # Si le répertoire cible n'existe pas, le créer
            os.makedirs(target_path, exist_ok=True)

            # Synchroniser le contenu du tar avec le dépôt Git
            sync_with_git(repo, target_path, temp_dir, args.message)

if __name__ == "__main__":
    main()
